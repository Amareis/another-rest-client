0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'publish', '.' ]
2 info using npm@3.5.2
3 info using node@v4.7.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/joe/work/another-rest-client',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/joe/.npm/another-rest-client/0.3.5/package.tgz not in flight; packing
9 info lifecycle another-rest-client@0.3.5~prepublish: another-rest-client@0.3.5
10 silly lifecycle another-rest-client@0.3.5~prepublish: no script for prepublish, continuing
11 verbose tar pack [ '/home/joe/.npm/another-rest-client/0.3.5/package.tgz',
11 verbose tar pack   '/home/joe/work/another-rest-client' ]
12 verbose tarball /home/joe/.npm/another-rest-client/0.3.5/package.tgz
13 verbose folder /home/joe/work/another-rest-client
14 verbose addLocalTarball adding from inside cache /home/joe/.npm/another-rest-client/0.3.5/package.tgz
15 silly cache afterAdd another-rest-client@0.3.5
16 verbose afterAdd /home/joe/.npm/another-rest-client/0.3.5/package/package.json not in flight; writing
17 verbose afterAdd /home/joe/.npm/another-rest-client/0.3.5/package/package.json written
18 silly publish { name: 'another-rest-client',
18 silly publish   version: '0.3.5',
18 silly publish   description: 'Simple REST API client that makes your code lesser and more beautiful than without it.',
18 silly publish   main: 'rest-client.js',
18 silly publish   scripts: { test: 'mocha', build: 'webpack' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+https://github.com/Amareis/another-rest-client.git' },
18 silly publish   keywords: [ 'rest' ],
18 silly publish   author: { name: 'joe', email: 'terma95@gmail.com' },
18 silly publish   license: 'MIT',
18 silly publish   bugs: { url: 'https://github.com/Amareis/another-rest-client/issues' },
18 silly publish   homepage: 'https://github.com/Amareis/another-rest-client#readme',
18 silly publish   devDependencies:
18 silly publish    { 'babel-core': '^6.26.0',
18 silly publish      'babel-loader': '^6.4.1',
18 silly publish      'babel-plugin-transform-object-assign': '^6.22.0',
18 silly publish      'babel-preset-es2015': '^6.24.1',
18 silly publish      chai: '^3.5.0',
18 silly publish      minivents: '^2.2.0',
18 silly publish      mocha: '^2.5.1',
18 silly publish      sinon: '^1.17.4',
18 silly publish      webpack: '^1.13.1' },
18 silly publish   readme: '# another-rest-client [![Build Status](https://travis-ci.org/Amareis/another-rest-client.svg?branch=master)](https://travis-ci.org/Amareis/another-rest-client)\nSimple REST API client that makes your code lesser and more beautiful than without it.\n\nThere is some rest clients - [restful.js](https://github.com/marmelab/restful.js), [cujojs/rest](https://github.com/cujojs/rest) or [amygdala](https://github.com/lincolnloop/amygdala) - so why you need another rest client? Because with it your code less and more beautiful than without it or with any analogs. Also, its code really simple - less than 200 sloc and (almost) without magic, so you can just read it (and fix, may be?) if something go wrong.\n\nTo prove my words, here is an minimal working code (you can explore more examples [here](https://github.com/Amareis/another-rest-client/tree/master/examples)):\n```js\nvar api = new RestClient(\'https://api.github.com\');\napi.res({repos: \'releases\'});\n\napi.repos(\'Amareis/another-rest-client\').releases(\'latest\').get().then(function(release){\n    console.log(release);\n    document.write(\'Latest release of another-rest-client:<br>\');\n    document.write(\'Published at: \' + release.published_at + \'<br>\');\n    document.write(\'Tag: \' + release.tag_name + \'<br>\');\n});\n```\n\n## Installation\nLibrary is available with bower or npm:\n```\nbower install --save another-rest-client\nnpm install --save-dev another-rest-client\n```\nNow, add it in script tag or require it or import it:\n```html\n<script src="bower_components/another-rest-client/rest-client.js">\nvar RestClient = require(\'another-rest-client\');\nimport RestClient from \'another-rest-client\'\n```\n**ATTENTION:** If you want to use another-rest-client with node.js, you must define XMLHttpRequest before import ([see here](https://github.com/driverdan/node-XMLHttpRequest)):\n```js\nglobal.XMLHttpRequest = require(\'xmlhttprequest\').XMLHttpRequest;\n```\n\n## Usage\n```js\nvar api = new RestClient(\'http://example.com\');\n```\nAnd here we go! First, let\'s define resources, using `res` method:\n```js\napi.res(\'cookies\');         //it gets resource name and returns resource\napi.res([\'cows\', \'bees\']);  //or it gets array of resource names and returns array of resources\napi.res({       //or it gets object and returns object where resource is available by name\n    dogs: [\n        \'toys\',\n        \'friends\'],\n    cats: 0,\n    humans:\n        \'posts\'\n});\n/* last string is equal to:\napi.res(\'dogs\').res([\'toys\', \'friends\']);\napi.res(\'cats\');\napi.res(\'humans\').res(\'posts\'); */\n```\n\nNow we can query our resources using methods `get` (optionally gets query args), `post`, `put`, `patch` (gets body content) and `delete`. All these methods returns promise, that resolves with object that given by server or rejects with `XMLHttpRequest` instance:\n```js\napi.cookies.get();              //GET http://example.com/cookies\napi.cookies.get({fresh: true}); //GET http://example.com/cookies?fresh=true\napi.cookies.get({\'filter[]\': \'fresh\'}, {\'filter[]\': \'taste\'}); //GET http://example.com/cookies?filter%5B%5D=fresh&filter%5B%5D=taste\n\n//POST http://example.com/cows, body="{"color":"white","name":"Moo"}"\napi.cows.post({color: \'white\', name: \'Moo\'}).then(function(cow) {\n    console.log(cow);    //just object, i.e. {id: 123, name: \'Moo\', color: \'white\'}\n}, function(xhr) {\n    console.log(xhr);   //XMLHtppRequest instance\n});\n```\nIf you want query single resource instance, just pass it id into resource:\n```js\napi.cookies(42).get();  //GET http://example.com/cookies/42\n\n//GET http://example.com/cookies/42?fields=ingridients,baker\napi.cookies(42).get({fields: [\'ingridients\', \'baker\']);\n\napi.bees(12).put({state: \'dead\'});  //PUT http://example.com/bees/12, body="{"state":"dead"}"\napi.cats(64).patch({age: 3});       //PATCH http://example.com/cats/64, body="{"age":3}"\n```\nYou can query subresources easily:\n```js\napi.dogs(1337).toys.get();          //GET http://example.com/dogs/1337/toys\napi.dogs(1337).friends(2).delete(); //DELETE http://example.com/dogs/1337/friends/2\n\n//POST http://example.com/humans/me/posts, body="{"site":"habrahabr.ru","nick":"Amareis"}"\napi.humans(\'me\').posts.post({site: \'habrahabr.ru\', nick: \'Amareis\'});\n```\nYou can use `url` resource method to get resource url:\n```js\napi.dogs.url() == \'/dogs\';\napi.dogs(1337).friends(1).url() == \'/dogs/1337/friends/1\';\n```\nAnd, of course, you always can use ES6 async/await to make your code more readable:\n```js\nvar me = api.humans(\'me\');\nvar i = await me.get();\nconsole.log(i);    //just object, i.e. {id: 1, name: \'Amareis\', profession: \'programmer\'}\nvar post = await me.posts.post({site: \'habrahabr.ru\', nick: i.name})\nconsole.log(post);  //object\n```\n\n## Events\n`RestClient` use [minivents](https://github.com/allouis/minivents) and emit some events:\n- `request` - when `open` XMLHttpRequest, but before `send`.\n- `response` - when get server response.\n- `success` - when get server response with status 200, 201 or 204.\n- `error` - when get server response with another status.\n\nAll events gets current XMLHttpRequest instance.\n\nOften use case - authorization:\n```js\napi.on(\'request\', function(xhr) {\n    xhr.setRequestHeader(\'Authorization\', \'Bearer xxxTOKENxxx\');\n});\n```\n\nAlso, returns by `get`, `post`, `put`, `patch` and `delete` `Promise` objects also emit these events, but only for current request.\n```js\napi.dogs(1337).toys.get().on(\'success\', console.log.bind(console)).then(toys => "..."); //in log will be xhr instance\napi.dogs(1337).toys.get().then(toys => "..."); //log is clear\n```\n\nYou can use events to set `responseType` XMLHttpRequest property, to handle binary files (and you can compose it with custom decoders, as described below, to automatically convert blob to File object):\n```js\napi.files(\'presentation.pdf\').get().on(\'request\', xhr => xhr.responseType = \'blob\').then(blobObj => "...");\n```\n\n## Configuration\nAll the examples given above are based on the default settings. If for some reason you are not satisfied, read this section.\n\nAll configuration is done using the object passed to the constructor or method `conf`. Some options are also duplicated by optional methods arguments.\n\n`conf` returns full options. If you call it without parameters (just `conf()`), it gives you current options.\n```js\nconsole.log(api.conf());\n/* Defaults:\n{\n    trailing: \'\',\n    shortcut: true,\n    contentType: \'application/json\',\n    \'application/x-www-form-urlencoded\': {encode: encodeUrl},\n    \'application/json\': {encode: JSON.stringify, decode: JSON.parse}\n}*/\n```\n\nIf you want change RestClient host (lol why?..), you can just:\n```js\napi.host = \'http://example2.com\';\n```\n\n### Trailing symbol\nSome APIs require trailing slash (for example, this is the default behavior in the django-rest-framework). By default another-rest-client doesn\'t use any trailing symbol, but you can change this:\n```js\nvar api = new RestClient(\'http://example.com\', {trailing: \'/\'});\n//or\napi.conf({trailing: \'/\'});\n```\nOf course, you can pass all you want (`{trailing: \'/i-have-no-idea-why-you-want-this-but-you-can/\'}`).\n\n### Shortcuts\nShortcuts - resources and subresources, that accessible as parent resource field:\n```js\napi.cars == undefined;\nvar cars = api.res(\'cars\');\napi.cars == cars;   //api.cars is shortcut for \'cars\' resource\n```\nBy default, another-rest-client will make shortcuts for defined resources. This behavior can be disabled in three ways:\n```js\napi.sounds == undefined\n\n//first way\nvar api = new RestClient(\'http://example.com\', {shortcut: false});\n//or, second way\napi.conf({shortcut: false});\n//or, third way\nvar sounds = api.res(\'sounds\', false);\n\n//and, still...\napi.sounds == undefined;\n```\nFirst two ways disables shortcuts globally - on all resources and subresources. Third way disables shortcuts locally - in one `res` call. Also, with third way you can locally *enable* shortcuts (pass `true` as second `res` argument) when globally they are disabled.\n\nLocal disable of shortcuts can solve some name conflicts (when resource shortcut overwrites some method), but, probably, you will not be affected by this.\n\n**It is strongly recommended do not disable the shortcuts, they greatly enhance code readability.**\n\n### Request content type\nWhen you call `post`, `put` or `patch`, you pass an object to be encoded into string and sent to the server. But how it will be encoded and what `Content-Type` header will be set?\nBy default - in json (`application/json`), using `JSON.stringify`. To change this behavior, you can manually set request content type:\n```js\nvar api = new RestClient(\'http://example.com\', {contentType: \'application/x-www-form-urlencoded\'});\n//or by conf\napi.conf({contentType: \'application/x-www-form-urlencoded\'});\n//or by second argument in \'post\', \'put\' or \'patch\'\napi.cookies.post({fresh: true}, \'application/x-www-form-urlencoded\');\n```\nBy default RestClient can encode data in `application/json` and `application/x-www-form-urlencoded`. You can add (or replace defaults with) your own encoders:\n```js\nvar opts = {\n    contentType: \'application/x-my-cool-mime\',\n    \'application/x-my-cool-mime\': {\n        encode: function (objectPassedToPostPutOrPatch) {\n            //...\n            return encodedToStringObject;\n        }\n    }\n}\nvar api = new RestClient(\'http://example.com\', opts);\n//or by conf\napi.conf(opts);\n```\nIf there is no suitable encoder, passed object will be passed to the XMLHttpRequest.send without changes.\n\n### Response content type\nWhen server answers, it give `Content-Type` header. another-rest-client smart enough to parse it and decode `XMLHttpRequest.responseText` into object. By default it can decode only `application/json` using `JSON.parse`, but you can add your own decoders:\n```js\nvar opts = {\n    \'application/x-my-cool-mime\': {\n        decode: function (stringFromXhrResponseText) {\n            //...\n            return decodedFromStringObject;\n        }\n    }\n}\nvar api = new RestClient(\'http://example.com\', opts);\n//or by conf\napi.conf(opts);\n```\nIf there is no suitable decoder (or server given\'t `Content-Type` header), gotten `XMLHttpRequest.response` will be passed to Promise.resolve without changes.\n\nOf course, you can combine encoders and decoders for single MIME:\n```js\nvar opts = {\n    contentType: \'application/x-my-cool-mime\',\n    \'application/x-my-cool-mime\': {\n        encode: function (objectPassedToPostPutOrPatch) {\n            //...\n            return encodedToStringObject;\n        },\n        decode: function (stringFromXhrResponseText) {\n            //...\n            return decodedFromStringObject;\n        }\n    }\n}\nvar api = new RestClient(\'http://example.com\', opts);\n//or by conf\napi.conf(opts);\n```\n\n## Contributing\nThat\'s easy:\n```bash\ngit clone https://github.com/Amareis/another-rest-client.git\ncd another-rest-client\nnpm install\necho "//Some changes..." >> src/rest-client.js\nnpm run build && npm test\n```\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: 'b54e1154df768ae1a967be32f83c8629f5a9b9a1',
18 silly publish   _id: 'another-rest-client@0.3.5',
18 silly publish   _shasum: '0bdbc82d47350212461286279190a50059eea1a9',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name another-rest-client
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/another-rest-client
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /home/joe/.npm/another-rest-client/0.3.5/package.tgz
26 verbose request uri https://registry.npmjs.org/another-rest-client
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 21:03:51
29 verbose request using bearer token for auth
30 verbose request id ff7cc061e9c34709
31 http request PUT https://registry.npmjs.org/another-rest-client
32 http 403 https://registry.npmjs.org/another-rest-client
33 verbose headers { 'content-type': 'application/json',
33 verbose headers   'cache-control': 'max-age=300',
33 verbose headers   'content-length': '91',
33 verbose headers   'accept-ranges': 'bytes',
33 verbose headers   date: 'Fri, 12 Jan 2018 16:03:53 GMT',
33 verbose headers   via: '1.1 varnish',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'x-served-by': 'cache-hhn1526-HHN',
33 verbose headers   'x-cache': 'MISS',
33 verbose headers   'x-cache-hits': '0',
33 verbose headers   'x-timer': 'S1515773032.780271,VS0,VE1592',
33 verbose headers   vary: 'Accept-Encoding, Accept' }
34 verbose request invalidating /home/joe/.npm/registry.npmjs.org/another-rest-client on PUT
35 error publish Failed PUT 403
36 verbose stack Error: You cannot publish over the previously published version 0.3.5. : another-rest-client
36 verbose stack     at makeError (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:264:12)
36 verbose stack     at CachingRegistryClient.<anonymous> (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:252:14)
36 verbose stack     at Request._callback (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:172:14)
36 verbose stack     at Request.self.callback (/usr/share/npm/node_modules/request/request.js:198:22)
36 verbose stack     at emitTwo (events.js:87:13)
36 verbose stack     at Request.emit (events.js:172:7)
36 verbose stack     at Request.<anonymous> (/usr/share/npm/node_modules/request/request.js:1082:10)
36 verbose stack     at emitOne (events.js:82:20)
36 verbose stack     at Request.emit (events.js:169:7)
36 verbose stack     at IncomingMessage.<anonymous> (/usr/share/npm/node_modules/request/request.js:1009:12)
37 verbose statusCode 403
38 verbose pkgid another-rest-client
39 verbose cwd /home/joe/work/another-rest-client
40 error Linux 4.10.0-42-generic
41 error argv "/usr/bin/nodejs" "/usr/bin/npm" "publish" "."
42 error node v4.7.2
43 error npm  v3.5.2
44 error code E403
45 error You cannot publish over the previously published version 0.3.5. : another-rest-client
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
